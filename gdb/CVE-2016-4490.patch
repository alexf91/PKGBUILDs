Backport of:

From 7d235b1b5ea35352c54957ef5530d9a02c46962f Mon Sep 17 00:00:00 2001
From: bernds <bernds@138bc75d-0d04-0410-961f-82ee72b054a4>
Date: Mon, 2 May 2016 17:06:40 +0000
Subject: [PATCH] =?utf8?q?Demangler=20integer=20overflow=20fixes=20from=20?=
 =?utf8?q?Marcel=20B=C3=B6hme.?=
MIME-Version: 1.0
Content-Type: text/plain; charset=utf8
Content-Transfer-Encoding: 8bit

	PR c++/70498
	* cp-demangle.c: Parse numbers as integer instead of long to avoid
	overflow after sanity checks. Include <limits.h> if available.
	(INT_MAX): Define if necessary.
	(d_make_template_param): Takes integer argument instead of long.
	(d_make_function_param): Likewise.
	(d_append_num): Likewise.
	(d_identifier): Likewise.
	(d_number): Parse as and return integer.
	(d_compact_number): Handle overflow.
	(d_source_name): Change variable type to integer for parsed number.
	(d_java_resource): Likewise.
	(d_special_name): Likewise.
	(d_discriminator): Likewise.
	(d_unnamed_type): Likewise.
	* testsuite/demangle-expected: Add regression test cases.



git-svn-id: svn+ssh://gcc.gnu.org/svn/gcc/trunk@235767 138bc75d-0d04-0410-961f-82ee72b054a4
---
 libiberty/ChangeLog                   | 19 +++++++++++++
 libiberty/cp-demangle.c               | 52 ++++++++++++++++++++---------------
 libiberty/testsuite/demangle-expected | 14 ++++++++--
 3 files changed, 61 insertions(+), 24 deletions(-)

#diff --git a/libiberty/ChangeLog b/libiberty/ChangeLog
#index 7497392..1407cd3 100644
#--- a/libiberty/ChangeLog
#+++ b/libiberty/ChangeLog
#@@ -1,3 +1,22 @@
#+2016-05-02  Marcel BÃ¶hme  <boehme.marcel@gmail.com>
#+
#+	PR c++/70498
#+	* cp-demangle.c: Parse numbers as integer instead of long to avoid
#+	overflow after sanity checks. Include <limits.h> if available.
#+	(INT_MAX): Define if necessary.
#+	(d_make_template_param): Takes integer argument instead of long.
#+	(d_make_function_param): Likewise.
#+	(d_append_num): Likewise.
#+	(d_identifier): Likewise.
#+	(d_number): Parse as and return integer.
#+	(d_compact_number): Handle overflow.
#+	(d_source_name): Change variable type to integer for parsed number.
#+	(d_java_resource): Likewise.
#+	(d_special_name): Likewise.
#+	(d_discriminator): Likewise.
#+	(d_unnamed_type): Likewise.
#+	* testsuite/demangle-expected: Add regression test cases.
#+
# 2016-04-30  Oleg Endo  <olegendo@gcc.gnu.org>
# 
# 	* configure: Remove SH5 support.
Index: gdb-7.7.1/libiberty/cp-demangle.c
===================================================================
--- gdb-7.7.1.orig/libiberty/cp-demangle.c	2017-06-08 07:59:31.318050563 -0400
+++ gdb-7.7.1/libiberty/cp-demangle.c	2017-06-08 08:00:09.254499826 -0400
@@ -124,6 +124,13 @@ extern char *alloca ();
 # endif /* alloca */
 #endif /* HAVE_ALLOCA_H */
 
+#ifdef HAVE_LIMITS_H
+#include <limits.h>
+#endif
+#ifndef INT_MAX
+# define INT_MAX       (int)(((unsigned int) ~0) >> 1)          /* 0x7FFFFFFF */ 
+#endif
+
 #include "ansidecl.h"
 #include "libiberty.h"
 #include "demangle.h"
@@ -394,7 +401,7 @@ d_make_dtor (struct d_info *, enum gnu_v
              struct demangle_component *);
 
 static struct demangle_component *
-d_make_template_param (struct d_info *, long);
+d_make_template_param (struct d_info *, int);
 
 static struct demangle_component *
 d_make_sub (struct d_info *, const char *, int);
@@ -417,7 +424,7 @@ static struct demangle_component *d_unqu
 
 static struct demangle_component *d_source_name (struct d_info *);
 
-static long d_number (struct d_info *);
+static int d_number (struct d_info *);
 
 static struct demangle_component *d_identifier (struct d_info *, int);
 
@@ -1097,7 +1104,7 @@ d_make_dtor (struct d_info *di, enum gnu
 /* Add a new template parameter.  */
 
 static struct demangle_component *
-d_make_template_param (struct d_info *di, long i)
+d_make_template_param (struct d_info *di, int i)
 {
   struct demangle_component *p;
 
@@ -1113,7 +1120,7 @@ d_make_template_param (struct d_info *di
 /* Add a new function parameter.  */
 
 static struct demangle_component *
-d_make_function_param (struct d_info *di, long i)
+d_make_function_param (struct d_info *di, int i)
 {
   struct demangle_component *p;
 
@@ -1587,7 +1594,7 @@ d_unqualified_name (struct d_info *di)
 static struct demangle_component *
 d_source_name (struct d_info *di)
 {
-  long len;
+  int len;
   struct demangle_component *ret;
 
   len = d_number (di);
@@ -1600,12 +1607,12 @@ d_source_name (struct d_info *di)
 
 /* number ::= [n] <(non-negative decimal integer)>  */
 
-static long
+static int
 d_number (struct d_info *di)
 {
   int negative;
   char peek;
-  long ret;
+  int ret;
 
   negative = 0;
   peek = d_peek_char (di);
@@ -1832,7 +1839,7 @@ d_java_resource (struct d_info *di)
 {
   struct demangle_component *p = NULL;
   struct demangle_component *next = NULL;
-  long len, i;
+  int len, i;
   char c;
   const char *str;
 
@@ -1974,7 +1981,7 @@ d_special_name (struct d_info *di)
 	case 'C':
 	  {
 	    struct demangle_component *derived_type;
-	    long offset;
+	    int offset;
 	    struct demangle_component *base_type;
 
 	    derived_type = cplus_demangle_type (di);
@@ -2897,10 +2904,10 @@ d_pointer_to_member_type (struct d_info
 
 /* <non-negative number> _ */
 
-static long
+static int
 d_compact_number (struct d_info *di)
 {
-  long num;
+  int num;
   if (d_peek_char (di) == '_')
     num = 0;
   else if (d_peek_char (di) == 'n')
@@ -2908,7 +2915,7 @@ d_compact_number (struct d_info *di)
   else
     num = d_number (di) + 1;
 
-  if (! d_check_char (di, '_'))
+  if (num < 0 || ! d_check_char (di, '_'))
     return -1;
   return num;
 }
@@ -2920,7 +2927,7 @@ d_compact_number (struct d_info *di)
 static struct demangle_component *
 d_template_param (struct d_info *di)
 {
-  long param;
+  int param;
 
   if (! d_check_char (di, 'T'))
     return NULL;
@@ -3122,9 +3129,10 @@ d_expression_1 (struct d_info *di)
 	}
       else
 	{
-	  index = d_compact_number (di) + 1;
-	  if (index == 0)
+	  index = d_compact_number (di);
+	  if (index == INT_MAX || index == -1)
 	    return NULL;
+	  index ++;
 	}
       return d_make_function_param (di, index);
     }
@@ -3447,7 +3455,7 @@ d_local_name (struct d_info *di)
 static int
 d_discriminator (struct d_info *di)
 {
-  long discrim;
+  int discrim;
 
   if (d_peek_char (di) != '_')
     return 1;
@@ -3503,7 +3511,7 @@ static struct demangle_component *
 d_unnamed_type (struct d_info *di)
 {
   struct demangle_component *ret;
-  long num;
+  int num;
 
   if (! d_check_char (di, 'U'))
     return NULL;
@@ -4016,10 +4024,10 @@ d_append_string (struct d_print_info *dp
 }
 
 static inline void
-d_append_num (struct d_print_info *dpi, long l)
+d_append_num (struct d_print_info *dpi, int l)
 {
   char buf[25];
-  sprintf (buf,"%ld", l);
+  sprintf (buf,"%d", l);
   d_append_string (dpi, buf);
 }
 
Index: gdb-7.7.1/libiberty/testsuite/demangle-expected
===================================================================
--- gdb-7.7.1.orig/libiberty/testsuite/demangle-expected	2017-06-08 07:59:31.318050563 -0400
+++ gdb-7.7.1/libiberty/testsuite/demangle-expected	2017-06-08 07:59:31.278050089 -0400
@@ -4344,12 +4344,22 @@ cereal::detail::InputBindingMap<cereal::
 _ZNSt9_Any_data9_M_accessIPZ4postISt8functionIFvvEEEvOT_EUlvE_EERS5_v
 void post<std::function<void ()> >(std::function<void ()>&&)::{lambda()#1}*& std::_Any_data::_M_access<void post<std::function<void ()> >(void post<std::function<void ()> >(std::function<void ()>&&)::{lambda()#1}*&&)::{lambda()#1}*>()
 #
-# Tests a use-after-free problem
+# Tests a use-after-free problem PR70481
 
 _Q.__0
 ::Q.(void)
 #
-# Tests a use-after-free problem
+# Tests a use-after-free problem PR70481
 
 _Q10-__9cafebabe.
 cafebabe.::-(void)
+#
+# Tests integer overflow problem PR70492
+
+__vt_90000000000cafebabe
+__vt_90000000000cafebabe
+#
+# Tests write access violation PR70498
+
+_Z80800000000000000000000
+_Z80800000000000000000000
